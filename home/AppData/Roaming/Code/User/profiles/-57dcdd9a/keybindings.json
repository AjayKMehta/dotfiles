[
    {
        "command": "git-graph.view",
        "key": "alt+g"
    },
    {
        "command": "-rewrap.rewrapComment",
        "key": "alt+q",
        "when": "editorTextFocus"
    },
    {
        "command": "-undo",
        "key": "alt+space"
    },
    {
        "command": "clever.string.nextQuotes",
        "key": "ctrl+'"
    },
    {
        "command": "-workbench.action.quickOpen",
        "key": "ctrl+,"
    },
    {
        "command": "-workbench.action.zoomOut",
        "key": "ctrl+-"
    },
    {
        "command": "workbench.action.zoomOut",
        "key": "ctrl+-",
        "when": "!editorTextFocus"
    },
    {
        "command": "clever.blockSelect.cleverSelect",
        "key": "ctrl+[ ctrl+]",
        "when": "editorHasSelection"
    },
    {
        "command": "workbench.files.action.showActiveFileInExplorer",
        "key": "ctrl+[ s"
    },
    {
        "command": "workbench.profiles.actions.switchProfile",
        "key": "ctrl+alt+/"
    },
    {
        "command": "clever.maximize.toggleWithoutSidebar",
        "key": "ctrl+alt+0",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.smartSelect.grow",
        "key": "ctrl+alt+1"
    },
    {
        "command": "-rest-client.switch-environment",
        "key": "ctrl+alt+e"
    },
    {
        "command": "errorLens.toggle",
        "key": "ctrl+alt+e"
    },
    {
        "command": "workbench.action.restartExtensionHost",
        "key": "ctrl+alt+f5",
        "when": "view.workbench.views.extensions.installed.visible"
    },
    {
        "command": "emojisense.quickEmoji",
        "key": "ctrl+alt+i",
        "when": "editorTextFocus"
    },
    {
        "command": "emojisense.quickEmojiTerminal",
        "key": "ctrl+alt+i",
        "when": "terminalFocus"
    },
    {
        "command": "-workbench.view.explorer",
        "key": "ctrl+alt+l",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "command": "-code-runner.stop",
        "key": "ctrl+alt+m"
    },
    {
        // Lets you select matches to edit via multi-cursors!
        "command": "editor.action.selectHighlights",
        "key": "ctrl+alt+m",
        "when": "editorFocus"
    },
    {
        "args": {
            "text": "\u0012"
        },
        "command": "workbench.action.terminal.sendSequence",
        "key": "ctrl+alt+r",
        "when": "terminalFocus"
    },
    {
        "command": "git.stage",
        "key": "ctrl+alt+s"
    },
    {
        "args": {
            "text": "#' Title\n#'\n#'Description\n#'\n#'@param $$\n#'\n#'@export\n#'\n#'@example\n#'"
        },
        "command": "type",
        "key": "ctrl+alt+shift+r",
        "when": "editorTextFocus && editorLangId == r || editorTextFocus && editorLangId == rmd"
    },
    {
        "command": "-workbench.debug.viewlet.action.addFunctionBreakpointAction",
        "key": "ctrl+b"
    },
    {
        "command": "-editor.action.copyLinesDownAction",
        "key": "ctrl+d"
    },
    {
        "command": "-editor.action.insertLineBefore",
        "key": "ctrl+enter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.insertLineBefore",
        "key": "ctrl+enter",
        "when": "editorTextFocus && !editorReadonly && editorLangId != 'r' && editorLangId != 'rmd'"
    },
    {
        "command": "-emojisense.quickEmoji",
        "key": "ctrl+i",
        "when": "editorTextFocus"
    },
    {
        "command": "-emojisense.quickEmojiTerminal",
        "key": "ctrl+i",
        "when": "terminalFocus"
    },
    {
        "command": "focusNextCodeAction",
        "key": "ctrl+j",
        "when": "CodeActionMenuVisible"
    },
    {
        "command": "focusPreviousCodeAction",
        "key": "ctrl+k",
        "when": "CodeActionMenuVisible"
    },
    {
        "command": "editor.action.formatSelection.multiple",
        "key": "ctrl+k alt+f"
    },
    {
        "command": "workbench.debug.viewlet.action.addFunctionBreakpointAction",
        "key": "ctrl+k b"
    },
    {
        "command": "-editor.action.selectFromAnchorToCursor",
        "key": "ctrl+k ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "command": "-workbench.action.openGlobalKeybindings",
        "key": "ctrl+k ctrl+s"
    },
    {
        "command": "git.diff.stageHunk",
        "key": "ctrl+k ctrl+s",
        "when": "inDiffEditor"
    },
    {
        "command": "workbench.action.openGlobalKeybindings",
        "key": "ctrl+k ctrl+s",
        "when": "!isInDiffEditor"
    },
    {
        "command": "workbench.action.pinEditor",
        "key": "ctrl+k ctrl+shift+p",
        "when": "!activeEditorIsPinned"
    },
    {
        "command": "workbench.action.unpinEditor",
        "key": "ctrl+k ctrl+shift+p",
        "when": "activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.pinEditor",
        "key": "ctrl+k shift+enter",
        "when": "!activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.unpinEditor",
        "key": "ctrl+k shift+enter",
        "when": "activeEditorIsPinned"
    },
    {
        "command": "workbench.action.terminal.runRecentCommand",
        "key": "ctrl+r",
        "when": "terminalFocus"
    },
    {
        "command": "csharpsortusings.sortUsings",
        "key": "ctrl+r ctrl+g"
    },
    {
        "command": "-workbench.action.zoomOut",
        "key": "ctrl+shift+-"
    },
    {
        "command": "workbench.action.zoomOut",
        "key": "ctrl+shift+-",
        "when": "!editorTextFocus"
    },
    {
        "command": "rewrap.rewrapComment",
        "key": "ctrl+shift+/",
        "when": "editorTextFocus"
    },
    {
        "command": "github.copilot.completions.toggle",
        "key": "ctrl+shift+alt+c"
    },
    {
        "command": "editor.action.inspectTMScopes",
        "key": "ctrl+shift+alt+i"
    },
    {
        "command": "-workbench.view.debug",
        "key": "ctrl+shift+d",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "command": "workbench.view.debug",
        "key": "ctrl+shift+d",
        "when": "viewContainer.workbench.view.debug.enabled && !terminalfocus"
    },
    {
        "command": "editor.action.insertLineAfter",
        "key": "ctrl+shift+down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "jupyter.notebookeditor.restartkernel",
        "key": "ctrl+shift+f10",
        "when": "jupyter.featureenabled && !findInputFocussed && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "command": "git.reopenClosedRepositories",
        "key": "ctrl+shift+g r",
        "when": "view.workbench.scm.visible"
    },
    {
        "command": "git.close",
        "key": "ctrl+shift+g w",
        "when": "view.workbench.scm.visible"
    },    
    {
        "args": {
            "snippet": "```{r}\n${TM_SELECTED_TEXT}$0\n```"
        },
        "command": "editor.action.insertSnippet",
        "key": "ctrl+shift+i",
        "label": "input indicative of r markdown code chunk",
        "when": "editorTextFocus && editorLangId == 'rmd'"
    },
    {
        "command": "-editor.action.deleteLines",
        "key": "ctrl+shift+k",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.selectHighlights",
        "key": "ctrl+shift+l",
        "when": "editorFocus"
    },
    {
        "command": "workbench.actions.view.problems",
        "key": "ctrl+shift+m",
        "when": "editorLangId != r && editorLangId != rmd"
    },
    {
        "command": "-workbench.action.reopenClosedEditor",
        "key": "ctrl+shift+t"
    },
    {
        "command": "workbench.action.reopenClosedEditor",
        "key": "ctrl+shift+t",
        "when": "!terminalFocus"
    },
    {
        "args": {
            "text": "${file}"
        },
        "command": "workbench.action.terminal.sendSequence",
        "key": "ctrl+shift+t",
        "when": "terminalFocus"
    },
    {
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
        "key": "ctrl+shift+tab",
        "when": "!inEditorsPicker"
    },
    {
        "command": "editor.action.transformToUppercase",
        "key": "ctrl+shift+u",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "key": "ctrl+tab",
        "when": "!inEditorsPicker"
    },
    {
        "command": "editor.action.transformToLowercase",
        "key": "ctrl+u",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.addSelectionToNextFindMatch",
        "key": "ctrl+w"
    },
    {
        "command": "-editor.action.smartSelect.expand",
        "key": "ctrl+w",
        "when": "editorTextFocus"
    },
    {
        "command": "r.helpPanel.openForSelection",
        "key": "f1",
        "when": "editorTextFocus && editorLangId == 'r' || editorTextFocus && editorLangId == 'rmd'"
    },
    {
        "command": "-sortLines.sortLines",
        "key": "f9",
        "when": "editorTextFocus"
    },
    {
        "command": "-cursorColumnSelectLeft",
        "key": "shift+alt+left",
        "when": "editorTextFocus"
    },
    {
        "command": "-cursorColumnSelectRight",
        "key": "shift+alt+right",
        "when": "editorTextFocus"
    },
    {
        "command": "PowerShell.ShowAdditionalCommands",
        "key": "shift+alt+s",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "command": "-editor.action.insertLineAfter",
        "key": "shift+enter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.insertLineAfter",
        "key": "shift+enter",
        "when": "editorTextFocus && !editorReadonly && editorLangId != 'python' && editorLangId != 'julia'"
    }
]
