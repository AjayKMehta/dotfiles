-- :set -package comonad

import Control.Applicative
import Control.Monad
-- import Control.Comonad
import Data.Char
import Data.List

-- https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/control.html

-- https://old.reddit.com/r/haskell/comments/fcjrt3/is_there_any_working_ide_for_haskell_out_there/fjc6et4/
:set -Wall -Wincomplete-record-updates
:set -Wno-type-defaults

-- https://typeclasses.com/ghci/config
:set prompt "\x03BB> "
:set prompt-cont " > "

-- https://limperg.de/ghc-extensions/
:seti -XExplicitForAll
:seti -XFunctionalDependencies
:seti -XViewPatterns
:seti -XPatternSynonyms
:seti -XKindSignatures
:seti -XLambdaCase
:seti -XNamedFieldPuns
:seti -XRecordWildCards
:seti -XFunctionalDependencies
:seti -XGADTSyntax
:seti -XGADTs
:seti -XConstraintKinds
:seti -XDataKinds
:seti -XNumericUnderscores
:seti -XGeneralizedNewtypeDeriving
:seti -XInstanceSigs
:seti -XConstrainedClassMethods
:seti -XExistentialQuantification
:seti -XTypeFamilies
:seti -XDefaultSignatures
:seti -XDisambiguateRecordFields
:seti -XDuplicateRecordFields
-- https://codetalk.io/posts/2020-04-05-common-json-patterns-in-haskell-rust-and-javascript.html#get-a-field
-- Allows us to have multiple record fields of the same name in scope. Prepend name with '#'.
:seti -XOverloadedLabels
:seti -XBangPatterns
:seti -XApplicativeDo
:seti -XNegativeLiterals
:seti -XTypeOperators
-- https://stackoverflow.com/questions/50788238/haskell-multi-way-if-expressions-need-multiwayif-turned-on
:seti -XMultiWayIf
-- https://sodocumentation.net/haskell/topic/1274/common-ghc-language-extensions
:seti -XOverloadedStrings
:seti -XUnicodeSyntax
:seti -XBinaryLiterals
:seti -XOverloadedLists
-- https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html
:seti -XPolyKinds
-- :seti -XAllowAmbiguousTypes

-- https://raehik.github.io/2022/10/07/ghc2021-in-2022.html
:seti -XDerivingStrategies
:seti -XNoStarIsType

-- https://alt-romes.github.io/posts/2023-11-30-computed-properties-for-haskell-records.html
:seti -XOverloadedRecordDot
