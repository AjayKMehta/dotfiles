# h/t: http://www.onthelambda.com/2014/09/17/fun-with-rprofile-and-customizing-r-startup/

local({
  r <- getOption("repos")
  r["RSTUDIO"] <- "https://packagemanager.rstudio.com/all/latest"
  r["ropensci"] <- "https://ropensci.r-universe.dev"
  r["CRAN"] <- "https://cran.r-project.org/"
  r["INLA"] <- "https://inla.r-inla-download.org/R/stable"
  options(repos = r)

  num_cores <- min(parallel::detectCores() - 1, 8)
  options(
    # Enable script file names and line numbers for tryCatchLog
    keep.source = TRUE,
    Ncpus = num_cores,
    mc.cores = num_cores,
{{ if .sparkdir}}    spark.install.dir = "{{.sparkdir}}",{{end}}
    datatable.print.trunc.cols = TRUE,
    warnPartialMatchAttr = TRUE,
    warnPartialMatchDollar = TRUE,
    warnPartialMatchArgs = TRUE,
    RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")),
    # https://github.com/Ikuyadeu/vscode-R/wiki/RStudio-addin-support
    vsc.rstudioapi = TRUE,
    # https://www.tidyverse.org/blog/2021/03/clock-0-1-0/#production
    clock.strict = TRUE,
    rlang_backtrace_on_error = "full",
    rlang_backtrace_on_error_report = "branch",
    rlang_backtrace_on_warning = "full",
    rlang_backtrace_on_warning_report = "branch",
    # 5 min timeout for downloading files
    timeout = 300,
    brms.backend = "cmdstanr",
    brms.file_refit = "on_change",
    .chores_chat = ellmer::chat_ollama(model = "qwen2.5-coder:14b", api_args = list(keep_alive = "30m", num_ctx = 4096)),
    # https://simonpcouch.github.io/gander/articles/gander.html#choosing-a-model
    .gander_fn = "chat_ollama",
    .gander_args = list(model = "qwen2.5-coder:14b")
  )
  if (interactive()) {
    is_vscode <- Sys.getenv("TERM_PROGRAM") == "vscode"
    # Don't change working directory if project or calling from VS Code.
    if (length(dir(getwd(), pattern = "[Rr]proj$")) == 0 &&
      !is_vscode) {
      setwd("{{ .rworkingdir }}")
    }

    if (is_vscode) {
      # activate RStudio Addins on command palette
      options(vsc.rstudioapi = TRUE)

      if ("httpgd" %in% .packages(all.available = TRUE)) {
        # https://github.com/Ikuyadeu/vscode-R/wiki/R-Session-watcher
        options(
          vsc.plot = FALSE,
          device = function(...) {
            httpgd::hgd()
            .vsc.browser(httpgd::hgd_url(), viewer = "Beside")
          }
        )

        # How much of the object to show on hover and autocomplete detail?
        # As controlled by max.level arg of str().
        # Use 0 (or 1) is the default - literal value or object type and dimensions
        # Use 2 to show list contents, data frame columns, and example values.
        options(vsc.str.max.level = 2)
      }
    }

    if (requireNamespace("progressr", quietly = TRUE)) {
      ## progressr reporting without need for with_progress()
      progressr::handlers(global = TRUE)

      ## Use 'cli', if installed ...
      if (requireNamespace("cli", quietly = TRUE)) {
        progressr::handlers("cli")
        ## Hand over all 'cli' progress reporting to 'progressr'
        options(cli.progress_handlers = "progressr")
      } else {
        ## ... otherwise use the one that comes with R
        progressr::handlers("txtprogressbar")
      }
      ## Reporting via RStudio, if running in the RStudio Console,
      ## but not the terminal
      if ((Sys.getenv("RSTUDIO") == "1") &&
        !nzchar(Sys.getenv("RSTUDIO_TERM"))) {
        progressr::handlers("rstudio", append = TRUE)
      }
    }

    if (requireNamespace("rlang", quietly = TRUE)) {
      # Promote base errors to rlang errors
      options(error = rlang::entrace)
      # Cause errors and warnings to be promoted to rlang conditions that
      # include a backtrace.
      rlang::global_entrace()
    }

    cat("Working Directory =", getwd())
  }
})
