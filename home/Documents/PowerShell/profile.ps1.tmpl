$env:LC_ALL = 'C.UTF-8'
$env:ConEmuANSI = $True
$env:DELTA_PAGER = 'less -rFX'
# https://ohmyposh.dev/docs/segments/git
$env:POSH_GIT_ENABLED = $true

# https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-7.4#formatenumerationlimit
$FormatEnumerationLimit = 10

# https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-7.4#psnativecommanduseerroractionpreference
# Native commands with non-zero exit codes issue errors according to $ErrorActionPreference.
$PSNativeCommandUseErrorActionPreference = $true

#region posh-git

Import-Module 'posh-git' -Force
# https://github.com/JanDeDobbeleer/oh-my-posh/issues/3297#issuecomment-1369845222
$GitPromptSettings.EnableStashStatus = $true

#endregion

$PSStyle.Progress.UseOSCIndicator = $true

if (!(Get-PSDrive -Name 'HKU' -ErrorAction Ignore)) {
    $null = New-PSDrive -Name 'HKU' -PSProvider Registry -Root 'HKEY_USERS'
}

if (!(Get-PSDrive -Name 'ps' -ErrorAction Ignore)) {
    $null = New-PSDrive -Name 'ps' -PSProvider FileSystem -Root '~/Documents/PowerShell/'
}

if (!(Get-PSDrive -Name 'vsc' -ErrorAction Ignore)) {
    $null = New-PSDrive -Name 'vsc' -PSProvider FileSystem -Root "$env:APPDATA\Code"
}

#region PSReadLine

# Either regular console or one created by PowerShell Extension
# if ($host.Name -in 'ConsoleHost', 'Visual Studio Code Host') {
if (!(Get-Module -Name PSReadLine)) {
    Import-Module PSReadline
}

. "$PSScriptRoot\Scripts\PSReadLine\PSReadLineProfile.ps1"
Import-Module -Name CompletionPredictor, DirectoryPredictor
Set-PSReadLineOption -PredictionSource HistoryAndPlugin
if (Test-Path env:\TERM_PROGRAM) {
    Set-PSReadLineOption -HistorySaveStyle SaveNothing
}

# endregion

Import-Module -Name pwshEmojiExplorer

# PowerShell parameter completion shim for the dotnet CLI
Register-ArgumentCompleter -Native -CommandName dotnet -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    dotnet complete --position $cursorPosition "$wordToComplete" | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
    }
}

# Parameter completion for CLI apps
Get-ChildItem "$PSScriptRoot\Scripts\ArgumentCompleters\*.ps1" | ForEach-Object { . $_ }


# region oh-my-posh

function Set-EnvVar([bool]$originalStatus) {
    $env:POSH = if (-not (Get-Module -Name PSReadLine)) {
        $False
    } else {
            (Get-PSReadLineOption).HistorySaveStyle -ne 'SaveNothing'
    }
    # OSC7: Remember current directory so if you open new tab in WezTerm, it will open in the same directory!
    # https://wezfurlong.org/wezterm/shell-integration.html#osc-7-on-windows-with-powershell
    # https://github.com/JanDeDobbeleer/oh-my-posh/issues/2515#issuecomment-1374322136
    $p = $executionContext.SessionState.Path.CurrentLocation
    $osc7 = ''
    if ($p.Provider.Name -eq 'FileSystem') {
        $ansi_escape = [char]27
        $providerPath = $p.ProviderPath -replace '\\', '/'
        $osc7 = ($env:TERM_PROGRAM -eq 'WezTerm') ?
            "$ansi_escape]7;file://${env:COMPUTERNAME}/${providerPath}${ansi_escape}\" :
            "$ansi_escape]9;9;`"$p`"${ansi_escape}"
        }
    $env:OSC7 = $osc7
}

function Set-PoshPrompt {
    param (
        [ArgumentCompleter({
                param (
                    $CommandName,
                    $ParameterName,
                    $WordToComplete,
                    $CommandAst,
                    $FakeBoundParameters
                )
                $result = Get-ChildItem $env:POSH_THEMES_PATH -Filter "$WordToComplete*.omp.json" |
                    ForEach-Object {
                        $file = "'$($_.FullName)'"
                        # 9 = ".omp.json".Length
                        $name = $_.Name.Substring(0, $_.Name.Length - 9)
                        [System.Management.Automation.CompletionResult]::new($file, $name, 'ParameterValue', $name)
                    }

                $result += Get-ChildItem ~\oh-my-posh -Filter "$WordToComplete*.omp.*" |
                    ForEach-Object {
                        $file = "'$($_.FullName)'"
                        $name = $_.Name.Substring(0, $_.Name.Length - 9)
                        [System.Management.Automation.CompletionResult]::new($file, $name, 'ParameterValue', $name)
                    }
                $result | Sort-Object -Property ListItemText
            })]
        [Parameter(Position = 0, Mandatory = $true)]
        [String] $Theme
    )

        (@(oh-my-posh init pwsh --config="$Theme" --print) -join "`n") | Invoke-Expression

    New-Alias -Name 'Set-PoshContext' -Value 'Set-EnvVar' -Scope Global -Force
}

Set-PoshPrompt -Theme '~\oh-my-posh\cool.omp.json'

#endregion

#region fzf

. "$PSScriptRoot\Scripts\Set-FzfTheme.ps1"

# $env:FZF_DEFAULT_COMMAND = 'rg --files . 2> nul'


function ifind() {
    fd | fzf --prompt 'All> ' --header 'CTRL-D: Directories / CTRL-F: Files' --bind 'ctrl-d:change-prompt(Directories> )+reload(fd --glob  * --type d)' --bind 'ctrl-f:change-prompt(Files> )+reload(fd --glob * --type f)'
}

# Inspired by https://junegunn.github.io/fzf/tips/ripgrep-integration/
function rfv {
    param(
        [switch] $NoPreview
    )

    $reload = 'reload:rg --column --color=always --smart-case {q} || :'
    $previewCmd = if ($NoPreview ) {
        ''
    } else {
        " --preview 'bat --style=full --color=always --highlight-line {2} {1}' --preview-window '~4,+{2}+4/3,<80(up)'"
    }

    $bind = "--bind 'start:$reload' --bind 'change:$reload' --bind 'ctrl-o:execute:code --goto {1}:{2}:{3}'"
    $cmd = "fzf --disabled --header 'CTRL-O: Open in VS Code' --ansi $bind --delimiter :$previewCmd"
    $result = Invoke-Expression -Command $cmd
    if ($result) {
        $parts = $result -split ':', 4
        [Psobject]@{
            FileName      = $parts[0]
            LineNumber    = $parts[1]
            StartPosition = $parts[2]
            Match         = $parts[3]
        }
    }
}

Import-Module -Name PSFzf
# Ctrl + t to select based on current PSProvider.
Set-PsFzfOption -PSReadlineChordReverseHistory 'Ctrl+Shift+r' -PSReadlineChordProvider 'Ctrl+t'
# Press Alt+C to set location based on selected directory.
# fe = fuzzy edit, fh = fuzzy history, fkill = fuzzy kill, fgs = fuzzy git status
# <C-g> is leader for git key bindings.
# <C-g>, <C-f> selects files.
# <C-g>, <C-b> selects branches.
# <C-g>, <C-t> selects tags.
# <C-g>, <C-h> selects hashes (commits).
# <C-g>, <C-s> selects stashes.

$setPsFzfOptionSplat = @{
    EnableAliasFuzzyEdit        = $true
    EnableAliasFuzzyHistory     = $true
    EnableAliasFuzzyKillProcess = $true
    EnableAliasFuzzyGitStatus   = $true
    EnableFd                    = $true
    GitKeyBindings              = $true
}
Set-PsFzfOption @setPsFzfOptionSplat

Set-Alias -Name 'fr' -Value Invoke-PsFzfRipgrep

# Use Ctrl+g, Ctrl+b for git branches
# Use Ctrl+g, Ctrl+f for git files
# Use Ctrl+g, Ctrl+h for git hashes

#endregion

if ($host.Name -eq 'ConsoleHost') {
    # This clobbers Tab shortcut mapping.
    Set-PSReadLineKeyHandler -Key Tab -ScriptBlock { Invoke-FzfTabCompletion }
    Import-Module 'WindowsConsoleFonts'
}

Import-Module 'cd-extras'
Set-CdExtrasOption ColorCompletion
# Paths within $cde.CD_PATH are included in the completion results.
Set-CdExtrasOption CD_PATH -Value '~/documents', 'D:/git', '~/.local/share'

Import-Module Terminal-Icons

# Docker
Import-Module -Name DockerCompletion, DockerComposeCompletion, DockerMachineCompletion

# Nice formatting
Import-Module Posh

if ($env:TERM_PROGRAM -eq 'vscode') { . "$(code --locate-shell-integration-path pwsh)" }

Import-Module Microsoft.PowerShell.SecretStore, Microsoft.PowerShell.SecretManagement

$env:Path += ';D:\Apps\Ollama'
if (Test-Path Env:/SPARK_HOME) {
    $env:Path += ";$(Join-Path $env:SPARK_HOME bin)"
}

# WinGet

Import-Module Microsoft.WinGet.CommandNotFound

# https://github.com/microsoft/winget-cli/blob/master/doc/Completion.md
Register-ArgumentCompleter -Native -CommandName winget -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)
    [Console]::InputEncoding = [Console]::OutputEncoding = $OutputEncoding = [System.Text.Utf8Encoding]::new()
    $Local:word = $wordToComplete.Replace('"', '""')
    $Local:ast = $commandAst.ToString().Replace('"', '""')
    winget complete --word="$Local:word" --commandline "$Local:ast" --position $cursorPosition | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
    }
}

# Zoxide

Invoke-Expression (& { zoxide init powershell | Out-String })

# cd + custom logic based on the value of _ZO_ECHO.
function global:__zoxide_cd {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingCmdletAliases', '', Justification = 'Required.')]
    param($dir, [bool] $literal)
    $dir = if ($literal) {
        # Use cd instead of Set-Location so it will work with cd-extras too!
        cd -LiteralPath $dir -PassThru -ErrorAction Stop
    } else {
        cd -Path $dir -PassThru -ErrorAction Stop
    }
}

# Run uv run without sync venv or updating lock file.
function uvrn() {
    uv run --no-sync $args
}

function uvu() {
    uv sync --upgrade
}

function lint-py {
    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedverbs', Justification = 'OK')]
    param()
    uvx ruff check $args
}

function format-py {
    uvx ruff format $args
}


# Add hook to handle changing location and setting .env, etc.
# Inspired by https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-1731647083

# Do not want venv prepending env name to prompt!
$env:VIRTUAL_ENV_DISABLE_PROMPT = 1

$Global:__envFolder = $null

$Global:__locationChangedHandler = [EventHandler[LocationChangedEventArgs]] {
    param([object] $source, [LocationChangedEventArgs] $locChangedEventArgs)
    end {
        [System.Management.Automation.PathInfo] $oldPath = $locChangedEventArgs.OldPath
        [System.Management.Automation.PathInfo] $newPath = $locChangedEventArgs.NewPath
        Write-Debug "Old: '$oldPath' New: '$newPath'"
        if ($newPath.Provider.Name -ne 'FileSystem') {
            return
        }

        if ($Global:__envFolder -and $newPath.Path.StartsWith($Global:__envFolder)) {
            Write-Debug 'Skipping check because new folder is subfolder of env path.'
        } else {
            $envFile = Join-Path $newPath '.env'
            if (Test-Path $envFile) {
                $Global:__envFolder = $newPath.Path

                Get-Content $envFile | ForEach-Object {
                    $line = $_.Trim()
                    if ($line -and $line -notlike '#*') {
                        $key, $value = $line -split '\s*=\s*', 2
                        # TODO: Should handle quote-delimited value?
                        # TODO: Write-Warning if already exist
                        [Environment]::SetEnvironmentVariable($key, $value, 'Process')
                    }
                }
            }
        }
        $psScript = [System.IO.Path]::Combine($newPath, '.venv', 'Scripts', 'Activate.ps1')

        if (Test-Path $psScript) {
            . $psScript
        }
    }
}

function Enable-LocationChanged() {
    $Global:__prevAction = $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction
    if ($Global:__prevAction) {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = [Delegate]::Combine($Global:__prevAction, $Global:__locationChangedHandler )
    } else {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = $Global:__locationChangedHandler
    }
}

function Disable-LocationChanged() {
    if ($Global:__prevAction) {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = $Global:__prevAction
    } else {
        $ExecutionContext.SessionState.InvokeCommand.LocationChangedAction = $null
    }
}

#Enable-LocationChanged
