def meld:
  . as $in | reduce (add | keys[]) as $k ({}; .[$k] = [$in[] | .[$k]]);

def translate_keys(f):
  walk( if type == "object" then with_entries( .key |= f ) else . end);

# Given an array of values as input, generate a stream of values of the
# maximal elements as determined by f.
# Notes:
# 1. If the input is [] then the output stream is empty.
# 2. If f evaluates to null for all the input elements,
#    then the output stream will be the stream of all the input items.

def maximal_by(f):
  (map(f) | max) as $mx
  | .[] | select(f == $mx);

# Emit a stream of the f-maximal elements of the stream, s:
# One-pass implementation
def maximals_by(s; f):
  reduce s as $x ([];
    ($x|f) as $y
    | if length == 0 then [$x]
      else (.[0]|f) as $v
      | if $y == $v then . + [$x] elif $y > $v then [$x] else . end
      end )
  | .[] ;
